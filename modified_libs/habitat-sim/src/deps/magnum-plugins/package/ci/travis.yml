addons:
  apt:
    packages:
    - g++-4.8
    - ninja-build
    - lcov
    - libfaad-dev
    - libfreetype6-dev
    - libjpeg-dev
    - libopenal-dev
    - libpng12-dev
    - libdevil-dev
    - libharfbuzz-dev
    - libassimp-dev

matrix:
  include:
  - language: cpp
    os: linux
    dist: xenial
    compiler: gcc
    env:
    - JOBID=linux
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
    - LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
    - CONFIGURATION=Debug
  - language: cpp
    os: linux
    dist: xenial
    compiler: gcc
    env:
    - JOBID=linux-nondeprecated
    - TARGET=desktop
    - BUILD_DEPRECATED=OFF
    - CMAKE_CXX_FLAGS="-DCORRADE_NO_ASSERT"
    - CONFIGURATION=Release
  - language: cpp
    os: linux
    dist: xenial
    compiler: clang
    env:
    - JOBID=linux-sanitizers
    - TARGET=desktop-sanitizers
    - CMAKE_CXX_FLAGS=-fsanitize=address
    - CONFIGURATION=Debug
    addons:
      apt:
        sources:
        - llvm-toolchain-xenial
        packages:
        - clang-3.8
        - ninja-build
        - libfaad-dev
        - libfreetype6-dev
        - libjpeg-dev
        - libopenal-dev
        - libpng12-dev
        - libdevil-dev
        - libharfbuzz-dev
        - libassimp-dev
  - language: cpp
    os: linux
    dist: xenial
    compiler: clang
    env:
    - JOBID=linux-threadsanitizer
    - TARGET=desktop-sanitizers
    - CMAKE_CXX_FLAGS=-fsanitize=thread
    - CONFIGURATION=Debug
    addons:
      apt:
        sources:
        - llvm-toolchain-xenial
        packages:
        - clang-3.8
        - ninja-build
        - libfaad-dev
        - libfreetype6-dev
        - libjpeg-dev
        - libopenal-dev
        - libpng12-dev
        - libdevil-dev
        - libharfbuzz-dev
        - libassimp-dev
  - language: cpp
    os: linux
    dist: xenial
    compiler: gcc
    env:
    - JOBID=linux-static
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
    - LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
    - BUILD_STATIC=ON
    - CONFIGURATION=Debug
  - language: cpp
    os: osx
    # The new plugin testing workflow is dynamically loading and unloading them
    # in the tests. When that's combined with coverage and LLVM < 5.0.1, all
    # such tests crash on exit: https://bugs.llvm.org/show_bug.cgi?id=27224
    # But only in some cases (for example not at all in tests for Corrade
    # PluginManager itself). The commit fixing it is from Jan 3 2018 and all
    # Xcode versions before Xcode 9.3 beta (released on Jan 24) are affected.
    # https://github.com/llvm-mirror/compiler-rt/commit/860d7953a6f36980f406bfbff76f3c00f15eed57
    # Xcode 9.3 beta has broken git clone ("unknown protocol version 2") since
    # Feb 16 2019, so using version 9.3 now.
    osx_image: xcode9.3
    compiler: clang
    env:
    - JOBID=macos
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
    - CONFIGURATION=Debug
  - language: cpp
    os: osx
    # See above
    osx_image: xcode9.3
    compiler: clang
    env:
    - JOBID=macos-static
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
    - BUILD_STATIC=ON
    - CONFIGURATION=Debug
  - language: cpp
    os: osx
    osx_image: xcode7.3
    env:
    - JOBID=ios
    - TARGET=ios-simulator
  - language: cpp
    os: osx
    # Using whatever is the default, since that could be hopefully most
    # up-to-date
    env:
    - JOBID=emscripten
    - TARGET=emscripten
  - language: android
    os: linux
    # Setting xenial here will cause it to use 12.04, with GCC 4.6 and other
    # prehistoric nightmares. So staying with 14.04 for the time being.
    dist: trusty
    env:
    - JOBID=android
    - TARGET=android
    addons:
      apt:
        packages:
        - ninja-build
    android:
      components:
      - build-tools-22.0.1
      - android-22
      - sys-img-armeabi-v7a-android-22

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/00ec7a9066bb0fec98f3
    on_success: change
    on_failure: always
    on_start: never

cache:
  directories:
  - $HOME/cmake
  # Not caching meshoptimizer build because it's small enough <3 and so it's
  # faster to download and build than unpacking the cache. Would cache just
  # the archive file, but Travis doesn't know how to do that, sigh.

install:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ] && [ ! "$TARGET" == "android" ]; then export CXX=g++-4.8; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-sanitizers" ]; then export CXX=clang++-3.8; fi
- if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
- if [ "$BUILD_STATIC" != "ON" ]; then export BUILD_STATIC=OFF; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then wget -nc https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip && unzip -q android-*.zip; fi
# Download CMake 3.4.3 to ensure we're still compatible with it (Travis has
# 3.9 since December 2017). Also, the PATH setting can't be cached, so it's
# separate (bit me two times already). Android needs CMake 3.7, but
# https://gitlab.kitware.com/cmake/cmake/issues/17253 is fixed in 3.9.2, so
# grab that.
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "android" ] && [ ! -e "$HOME/cmake/bin" ]; then cd $HOME ; wget -nc --no-check-certificate https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz && mkdir -p cmake && cd cmake && tar --strip-components=1 -xzf ../cmake-3.4.3-Linux-x86_64.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ] && [ ! -e "$HOME/cmake/bin" ]; then cd $HOME ; wget -nc --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.2-Linux-x86_64.tar.gz && mkdir -p cmake && cd cmake && tar --strip-components=1 -xzf ../cmake-3.9.2-Linux-x86_64.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$HOME/cmake/bin:$PATH && cmake --version; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then gem install xcpretty; fi
# binaryen is a dependency for wasm targets, but homebrew devs don't give a
# shit: https://github.com/Homebrew/homebrew-core/issues/47869 Also the
# generated .emscripten doesn't have a newline at EOL so the workaround listed
# in the issue doesn't work and one has to add explicit \n there to make it
# work. EVERYTHING SUCKS NOWADAYS.
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install emscripten binaryen && export LLVM=/usr/local/opt/emscripten/libexec/llvm/bin && emcc && echo -e "\nBINARYEN_ROOT = '/usr/local'\n" >> ~/.emscripten; fi

# FAAD2, HarfBuzz, Assimp, DevIL
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install faad2 harfbuzz assimp devil; fi

# meshoptimizer, few commits after 0.14 with a fix for old Apple Clang
- if [[ "$TARGET" == desktop* ]]; then wget -nc --no-check-certificate https://github.com/zeux/meshoptimizer/archive/97c52415c6d29f297a76482ddde22f739292446d.tar.gz && mkdir -p meshoptimizer && cd meshoptimizer && tar --strip-components=1 -xzf ../97c52415c6d29f297a76482ddde22f739292446d.tar.gz && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_INSTALL_PREFIX=$HOME/deps -G Ninja && ninja install && cd $TRAVIS_BUILD_DIR; fi

# Basis Universal
- export BASIS_VERSION=8565af680d1bd2ad56ab227ca7d96c56dfbe93ed && wget -nc https://github.com/BinomialLLC/basis_universal/archive/$BASIS_VERSION.zip && unzip -q $BASIS_VERSION; mv basis_universal-$BASIS_VERSION $HOME/basis_universal

script:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then ./package/ci/travis-android-arm.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then ./package/ci/travis-ios-simulator.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then ./package/ci/travis-emscripten.sh; fi
# Travis somehow is not able to gather all output, try to force it using this
- sync

after_success:
# Keep in sync with PKBUILD-coverage, please
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --directory . --capture --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --extract coverage.info "*/src/Magnum*/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/src/MagnumExternal/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/Test/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/build/src/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then bash <(curl -s https://codecov.io/bash) -f coverage.info; fi
